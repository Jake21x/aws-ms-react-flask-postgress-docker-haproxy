{"version":3,"sources":["components/NotifPortal.tsx","pages/404Page.tsx","logo.svg","app/hooks.ts","features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/counter/Counter.tsx","pages/Dashboard.tsx","components/Login.tsx","pages/LoginPage.tsx","components/TableData.tsx","utils/columns.js","pages/Templates.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/counter/Counter.module.css"],"names":["NotifPortal","children","el","useState","setDomReady","useEffect","setTimeout","document","getElementById","ReactDOM","createPortal","Page404","pathname","useLocation","justify","direction","alignItems","fontWeight","fontSize","useAppSelector","useSelector","fetchCount","amount","Promise","resolve","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","Counter","count","dispatch","useDispatch","incrementAmount","setIncrementAmount","incrementValue","Number","className","styles","row","button","aria-label","onClick","textbox","onChange","e","target","asyncButton","getState","Dashboard","src","logo","alt","href","rel","Login","useForm","register","handleSubmit","errors","onSubmit","form","console","log","ref","required","type","m","username","textAlign","color","password","LoginPage","display","h","placeItems","w","TableData","columns","noTableHead","chain_columns","selector","sortable","right","Templates","loading","setLoading","column","Sheets","active","setActive","uploadValue","newfilename","replace","bodyFormData","FormData","append","url","axios","post","then","catch","err","isactive","toLowerCase","replaceAll","map","index","evt","preventDefault","toUpperCase","my","accept","isLoading","App","useDisclosure","isOpen","onOpen","onClose","networkToggle","setNetworkToggle","queryClient","QueryClient","online","window","addEventListener","offline","removeEventListener","QueryClientProvider","client","in","animateOpacity","align","bg","p","exact","path","component","store","configureStore","reducer","counterReducer","Boolean","location","hostname","match","theme","extendTheme","colors","brand","900","800","700","render","StrictMode","id","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.26b4c053.chunk.js","sourcesContent":["import ReactDOM from \"react-dom\";\nimport { useEffect, useState } from \"react\";\n\ntype Props = {\n  el: string;\n  children: React.ReactNode;\n};\n\nfunction NotifPortal({ children, el }: Props) {\n  const [, setDomReady] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setDomReady(true);\n    }, 100);\n  }, []);\n\n  return document.getElementById(el)\n    ? ReactDOM.createPortal(\n        children,\n        document.getElementById(el) as HTMLElement\n      )\n    : null;\n}\n\nexport default NotifPortal;\n","import { Flex, Text } from \"@chakra-ui/layout\";\nimport { useLocation } from \"react-router\";\n\nfunction Page404() {\n  const { pathname } = useLocation();\n  return (\n    <Flex justify=\"center\" direction=\"column\" alignItems=\"center\">\n      <Text fontWeight=\"bold\" fontSize=\"lg\">\n        404\n      </Text>\n      Page not found {pathname}\n    </Flex>\n  );\n}\n\nexport default Page404;\n","export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import React, { useState } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  incrementAsync,\n  incrementIfOdd,\n  selectCount,\n} from './counterSlice';\nimport styles from './Counter.module.css';\n\nexport function Counter() {\n  const count = useAppSelector(selectCount);\n  const dispatch = useAppDispatch();\n  const [incrementAmount, setIncrementAmount] = useState('2');\n\n  const incrementValue = Number(incrementAmount) || 0;\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n      </div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\n        >\n          Add Amount\n        </button>\n        <button\n          className={styles.asyncButton}\n          onClick={() => dispatch(incrementAsync(incrementValue))}\n        >\n          Add Async\n        </button>\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementIfOdd(incrementValue))}\n        >\n          Add If Odd\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport logo from \"../logo.svg\";\nimport { Counter } from \"../features/counter/Counter\";\n\nfunction Dashboard() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Counter />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <span>\n          <span>Learn </span>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React\n          </a>\n          <span>, </span>\n          <a\n            className=\"App-link\"\n            href=\"https://redux.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux\n          </a>\n          <span>, </span>\n          <a\n            className=\"App-link\"\n            href=\"https://redux-toolkit.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux Toolkit\n          </a>\n          ,<span> and </span>\n          <a\n            className=\"App-link\"\n            href=\"https://react-redux.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React Redux\n          </a>\n        </span>\n      </header>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import { Button } from \"@chakra-ui/button\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { useForm } from \"react-hook-form\";\n\ntype TLogin = {\n  username: String;\n  password: String;\n  mode: String;\n};\n\nfunction Login() {\n  const { register, handleSubmit, errors } = useForm<TLogin>();\n\n  const onSubmit = (form: TLogin) => {\n    console.log(\"onSubmit\", form);\n  };\n\n  return (\n    <Box>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Input name=\"username\" ref={register({ required: true })} />\n        <Input\n          name=\"password\"\n          ref={register({ required: true })}\n          type=\"password\"\n        />\n\n        <Box m=\"1\">\n          {errors.username && (\n            <Text fontSize=\"xs\" textAlign=\"start\" color=\"tomato\">\n              username is required!\n            </Text>\n          )}\n          {errors.password && (\n            <Text fontSize=\"xs\" textAlign=\"start\" color=\"tomato\">\n              password is required!\n            </Text>\n          )}\n        </Box>\n        <Button type=\"submit\">Login</Button>\n      </form>\n    </Box>\n  );\n}\n\nexport default Login;\n","import { Box, Flex } from \"@chakra-ui/layout\";\nimport Login from \"src/components/Login\";\n\nfunction LoginPage() {\n  return (\n    <Flex display=\"grid\" h=\"full\" placeItems=\"center\">\n      <Box w=\"3xl\">\n        <Login />\n      </Box>\n    </Flex>\n  );\n}\n\nexport default LoginPage;\n","import DataTable from \"react-data-table-component\";\n\ninterface props {\n  data: any;\n  columns: any;\n}\n\nfunction TableData({ columns, data }: props) {\n  return <DataTable noTableHead columns={columns} data={data} />;\n}\n\nexport default TableData;\n","export const chain_columns = [\n  {\n    name: \"ChainID\",\n    selector: \"chainid\",\n    sortable: true,\n  },\n  {\n    name: \"Name\",\n    selector: \"name\",\n    sortable: true,\n  },\n  {\n    name: \"AgencyId\",\n    selector: \"agencyid\",\n    sortable: true,\n    right: true,\n  },\n];\n","import { Button } from \"@chakra-ui/button\";\nimport { Box, Flex, Text } from \"@chakra-ui/layout\";\nimport { Tab, TabList, TabPanel, TabPanels, Tabs } from \"@chakra-ui/tabs\";\nimport TableData from \"src/components/TableData\";\nimport { chain_columns } from \"src/utils/columns\";\nimport { useState } from \"react\";\nimport { Input } from \"@chakra-ui/input\";\n\nimport { useForm } from \"react-hook-form\";\nimport axios from \"axios\";\n\ntype FormValues = {\n  file_chain: Blob;\n  file_area: Blob;\n  file_category: Blob;\n  file_category_reference: Blob;\n  file_sku: Blob;\n  file_stores: Blob;\n  file_stores_skus: Blob;\n  file_users: Blob;\n  file_users_schedules: Blob;\n};\n\ntype TSheet = {\n  name: String;\n  column: any;\n  data: any;\n};\n\nfunction Templates() {\n  const { register, handleSubmit } = useForm<FormValues>();\n  const [loading, setLoading] = useState(false);\n\n  const [Sheets] = useState<TSheet[]>([\n    {\n      name: \"Chain\",\n      column: chain_columns,\n      data: [],\n    },\n    {\n      name: \"Area\",\n      column: chain_columns,\n      data: [],\n    },\n    {\n      name: \"Agency\",\n      column: chain_columns,\n      data: [],\n    },\n    {\n      name: \"Stores\",\n      column: chain_columns,\n      data: [],\n    },\n    {\n      name: \"Users\",\n      column: chain_columns,\n      data: [],\n    },\n    {\n      name: \"Users Schedules\",\n      column: chain_columns,\n      data: [],\n    },\n    {\n      name: \"SKUs\",\n      column: chain_columns,\n      data: [],\n    },\n    {\n      name: \"Category\",\n      column: chain_columns,\n      data: [],\n    },\n    {\n      name: \"Category Reference\",\n      column: chain_columns,\n      data: [],\n    },\n    {\n      name: \"Stores SKUs\",\n      column: chain_columns,\n      data: [],\n    },\n  ]);\n\n  const [active, setActive] = useState(Sheets[0]);\n\n  // const [data , setData] = useState(\"\")\n  // useEffect(()=>{\n  // },[selected])\n\n  const onSubmit = (form: any) => {\n    const isactive = \"file_\" + active.name.toLowerCase().replaceAll(\" \", \"_\");\n    console.log(\"onSubmit > form\", form);\n    console.log(\"onSubmit > form\", form[isactive][0]);\n    uploadValue(isactive, form[isactive][0]);\n  };\n\n  const uploadValue = (value: string, form: Blob) => {\n    const newfilename = value.replace(\"file_\", \"\") + \".xlsx\";\n    console.log(\"uploadValue > \", value);\n    setLoading(true);\n    var bodyFormData = new FormData();\n    bodyFormData.append(\"file\", form, newfilename);\n    const url = \"/api/upload/template/\" + value.replace(\"file_\", \"\");\n    console.log(\"url\", url);\n\n    axios\n      .post(url, bodyFormData)\n      .then((response) => {\n        setLoading(false);\n        console.log(\"response\", response);\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(\"err\", err);\n      });\n  };\n\n  return (\n    <Box m=\"3\">\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Tabs>\n          <TabList>\n            {Sheets.map((value, index) => (\n              <Tab\n                onClick={(evt) => {\n                  setActive(value);\n                  evt.preventDefault();\n                }}\n                fontSize=\"sm\"\n                key={index}\n              >\n                {value.name.toUpperCase()}\n              </Tab>\n            ))}\n          </TabList>\n\n          <TabPanels>\n            {Sheets.map((value, index) => {\n              return (\n                <TabPanel key={index + \"\" + value}>\n                  <Text fontWeight=\"bold\" my=\"3\">\n                    {value.name.toUpperCase()}\n                  </Text>\n\n                  <Flex alignItems=\"center\">\n                    <Input\n                      accept=\".xlsx, .xls\"\n                      name={\n                        \"file_\" + value.name.toLowerCase().replaceAll(\" \", \"_\")\n                      }\n                      ref={register}\n                      type=\"file\"\n                    />\n                    <Button isLoading={loading} type=\"submit\">\n                      Upload\n                    </Button>\n                  </Flex>\n\n                  <TableData columns={value.column} data={value.data} />\n                </TabPanel>\n              );\n            })}\n          </TabPanels>\n        </Tabs>\n      </form>\n    </Box>\n  );\n}\n\nexport default Templates;\n","import { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Flex, Text } from \"@chakra-ui/layout\";\nimport { Collapse } from \"@chakra-ui/transition\";\nimport { useEffect, useState } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport NotifPortal from \"./components/NotifPortal\";\nimport Page404 from \"./pages/404Page\";\nimport Dashboard from \"./pages/Dashboard\";\nimport LoginPage from \"./pages/LoginPage\";\nimport Templates from \"./pages/Templates\";\n\nfunction App() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [networkToggle, setNetworkToggle] = useState<string | null>(null);\n  const queryClient = new QueryClient();\n\n  useEffect(() => {\n    const online: any = window.addEventListener(\"online\", () => {\n      onClose();\n      onOpen();\n      setNetworkToggle(\"online\");\n      setTimeout(() => {\n        onClose();\n      }, 4000);\n    });\n    const offline: any = window.addEventListener(\"offline\", () => {\n      onOpen();\n      setNetworkToggle(\"offline\");\n    });\n\n    return () => {\n      window.removeEventListener(\"online\", online);\n      window.removeEventListener(\"offline\", offline);\n    };\n  });\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <NotifPortal el=\"networkstatus\">\n        <Collapse in={isOpen} animateOpacity>\n          {networkToggle === \"online\" ? (\n            <Flex align=\"center\" justify=\"center\" bg=\"#0dc445\" w=\"100%\">\n              <Text color=\"white\" fontSize=\"sm\" p=\"1\">\n                Your network is restored\n              </Text>\n            </Flex>\n          ) : (\n            <Flex align=\"center\" justify=\"center\" bg=\"#f51b1b\" w=\"100%\">\n              <Text color=\"white\" fontSize=\"sm\" p=\"1\">\n                You're on offline mode\n              </Text>\n            </Flex>\n          )}\n        </Collapse>\n      </NotifPortal>\n      <Router>\n        <Switch>\n          <Route exact path=\"/:username/templates\" component={Templates} />\n          <Route exact path=\"/login\" component={LoginPage} />\n          <Route exact path=\"/\" component={Dashboard} />\n          {/* <Route exact path=\"/\" component={Loader} /> */}\n          <Route component={Page404} />\n        </Switch>\n      </Router>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Box, ChakraProvider, extendTheme } from \"@chakra-ui/react\";\n\nconst colors = {\n  brand: {\n    900: \"#1a365d\",\n    800: \"#153e75\",\n    700: \"#2a69ac\",\n  },\n};\nconst theme = extendTheme({ colors });\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider theme={theme}>\n        <Box w=\"100%\" id=\"networkstatus\" />\n        <App />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};"],"sourceRoot":""}